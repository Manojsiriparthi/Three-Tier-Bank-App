{"ast":null,"code":"var _jsxFileName = \"/root/Three-Tier-Bank-App/Frontend/src/components/Withdraw.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst apiUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : 'http://backend:5000';\nconst Withdraw = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]); // State for storing accounts\n  const [selectedAccount, setSelectedAccount] = useState(null); // State for the selected account\n  const [withdrawAmount, setWithdrawAmount] = useState(0); // State for withdrawal amount\n  const [message, setMessage] = useState(''); // State for success/error messages\n\n  // Fetch accounts from the backend when the component loads\n  useEffect(() => {\n    const fetchAccounts = async () => {\n      try {\n        const response = await fetch(`${apiUrl}/api/accounts`);\n        const data = await response.json();\n        setAccounts(data); // Set the accounts in state\n      } catch (error) {\n        console.error('Error fetching accounts:', error); // Log errors\n      }\n    };\n    fetchAccounts();\n  }, [apiUrl]);\n\n  // Handle the selection of an account from the dropdown\n  const handleAccountChange = e => {\n    const account = accounts.find(acc => acc._id === e.target.value); // Find account by ID\n    setSelectedAccount(account); // Set the selected account\n  };\n\n  // Handle the withdrawal action\n  const handleWithdraw = async e => {\n    e.preventDefault(); // Prevent default form submission\n\n    if (!selectedAccount) {\n      // Ensure an account is selected\n      setMessage('Please select an account');\n      return;\n    }\n    if (withdrawAmount <= 0) {\n      // Ensure withdrawal amount is valid\n      setMessage('Please enter a valid withdrawal amount');\n      return;\n    }\n    try {\n      const response = await fetch(`${apiUrl}/api/accounts/withdraw`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accountNumber: selectedAccount.accountNumber,\n          // Send selected account number\n          amount: parseInt(withdrawAmount, 10) // Ensure withdrawal amount is sent as a number\n        })\n      });\n      const result = await response.json(); // Get response from backend\n      if (response.ok) {\n        // Update the selected account's balance and display success message\n        setSelectedAccount({\n          ...selectedAccount,\n          balance: result.newBalance\n        });\n        setMessage('Withdrawal successful');\n      } else {\n        setMessage(result.message || 'Error making withdrawal'); // Handle errors\n      }\n    } catch (error) {\n      console.error('Error making withdrawal:', error); // Log errors\n      setMessage('Error making withdrawal');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"withdraw-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Withdraw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleAccountChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select an account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: account._id,\n        children: [account.firstName, \" \", account.lastName]\n      }, account._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), selectedAccount && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Name: \", selectedAccount.firstName, \" \", selectedAccount.lastName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Number: \", selectedAccount.accountNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"IFSC Code: \", selectedAccount.ifscCode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Available Balance: \\xA3\", selectedAccount.balance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleWithdraw,\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Withdraw Amount\",\n          onChange: e => setWithdrawAmount(e.target.value) // Update withdrawal amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Withdraw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        marginTop: '10px'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_s(Withdraw, \"piHDAzBsG7wd/Y431RynXTiCO0U=\");\n_c = Withdraw;\nexport default Withdraw;\nvar _c;\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","apiUrl","process","env","NODE_ENV","Withdraw","_s","accounts","setAccounts","selectedAccount","setSelectedAccount","withdrawAmount","setWithdrawAmount","message","setMessage","fetchAccounts","response","fetch","data","json","error","console","handleAccountChange","e","account","find","acc","_id","target","value","handleWithdraw","preventDefault","method","headers","body","JSON","stringify","accountNumber","amount","parseInt","result","ok","balance","newBalance","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","firstName","lastName","ifscCode","onSubmit","type","placeholder","style","marginTop","_c","$RefreshReg$"],"sources":["/root/Three-Tier-Bank-App/Frontend/src/components/Withdraw.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst apiUrl = process.env.NODE_ENV === 'development'\n    ? 'http://localhost:5000'\n    : 'http://backend:5000';\n\nconst Withdraw = () => {\n  const [accounts, setAccounts] = useState([]); // State for storing accounts\n  const [selectedAccount, setSelectedAccount] = useState(null); // State for the selected account\n  const [withdrawAmount, setWithdrawAmount] = useState(0); // State for withdrawal amount\n  const [message, setMessage] = useState(''); // State for success/error messages\n\n  // Fetch accounts from the backend when the component loads\n  useEffect(() => {\n    const fetchAccounts = async () => {\n      try {\n        const response = await fetch(`${apiUrl}/api/accounts`);\n        const data = await response.json();\n        setAccounts(data); // Set the accounts in state\n      } catch (error) {\n        console.error('Error fetching accounts:', error); // Log errors\n      }\n    };\n\n    fetchAccounts();\n  }, [apiUrl]);\n\n  // Handle the selection of an account from the dropdown\n  const handleAccountChange = (e) => {\n    const account = accounts.find(acc => acc._id === e.target.value); // Find account by ID\n    setSelectedAccount(account); // Set the selected account\n  };\n\n  // Handle the withdrawal action\n  const handleWithdraw = async (e) => {\n    e.preventDefault(); // Prevent default form submission\n\n    if (!selectedAccount) { // Ensure an account is selected\n      setMessage('Please select an account');\n      return;\n    }\n\n    if (withdrawAmount <= 0) { // Ensure withdrawal amount is valid\n      setMessage('Please enter a valid withdrawal amount');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${apiUrl}/api/accounts/withdraw`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          accountNumber: selectedAccount.accountNumber, // Send selected account number\n          amount: parseInt(withdrawAmount, 10), // Ensure withdrawal amount is sent as a number\n        }),\n      });\n\n      const result = await response.json(); // Get response from backend\n      if (response.ok) {\n        // Update the selected account's balance and display success message\n        setSelectedAccount({ ...selectedAccount, balance: result.newBalance });\n        setMessage('Withdrawal successful');\n      } else {\n        setMessage(result.message || 'Error making withdrawal'); // Handle errors\n      }\n    } catch (error) {\n      console.error('Error making withdrawal:', error); // Log errors\n      setMessage('Error making withdrawal');\n    }\n  };\n\n  return (\n    <div className=\"withdraw-container\">\n      <h2>Withdraw</h2>\n\n      {/* Dropdown to select an account */}\n      <label>Select Account</label>\n      <select onChange={handleAccountChange}>\n        <option value=\"\">Select an account</option>\n        {accounts.map((account) => (\n          <option key={account._id} value={account._id}>\n            {account.firstName} {account.lastName}\n          </option>\n        ))}\n      </select>\n\n      {/* Display selected account details if an account is selected */}\n      {selectedAccount && (\n        <>\n          <p>Account Name: {selectedAccount.firstName} {selectedAccount.lastName}</p>\n          <p>Account Number: {selectedAccount.accountNumber}</p>\n          <p>IFSC Code: {selectedAccount.ifscCode}</p>\n\n          {/* Only 2 lines of space after balance */}\n          <p>Available Balance: £{selectedAccount.balance}</p>\n\n          {/* Form for withdrawing money */}\n          <form onSubmit={handleWithdraw} className=\"form-container\">\n            <input \n              type=\"number\" \n              placeholder=\"Withdraw Amount\" \n              onChange={(e) => setWithdrawAmount(e.target.value)} // Update withdrawal amount\n            />\n            <button type=\"submit\">Withdraw</button>\n          </form>\n        </>\n      )}\n\n      {/* Display success or error message immediately after withdrawal */}\n      <p style={{ marginTop: '10px' }}>{message}</p> {/* Spacing after withdraw button */}\n    </div>\n  );\n};\n\nexport default Withdraw;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}