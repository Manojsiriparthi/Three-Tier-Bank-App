{"ast":null,"code":"var _jsxFileName = \"/root/Three-Tier-Bank-App/Frontend/src/components/Deposit.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Deposit = () => {\n  _s();\n  const [accounts, setAccounts] = useState([]); // State for storing accounts\n  const [selectedAccount, setSelectedAccount] = useState(null); // State for the selected account\n  const [depositAmount, setDepositAmount] = useState(0); // State for deposit amount\n  const [message, setMessage] = useState(''); // State for success/error messages\n\n  // API URL depending on whether the environment is development or production (Docker)\n  const apiUrl = process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : 'http://backend:5000';\n\n  // Fetch accounts from the backend when the component loads\n  useEffect(() => {\n    const fetchAccounts = async () => {\n      try {\n        const response = await fetch(`${apiUrl}/api/accounts`); // Fetch accounts from backend\n        const data = await response.json(); // Parse the JSON data\n\n        console.log('Fetched accounts:', data); // Log fetched data for debugging\n        setAccounts(data); // Set the accounts in state\n      } catch (error) {\n        console.error('Error fetching accounts:', error); // Log any errors\n      }\n    };\n    fetchAccounts();\n  }, [apiUrl]); // Dependency array includes apiUrl to ensure it runs on load\n\n  // Handle the selection of an account from the dropdown\n  const handleAccountChange = e => {\n    const account = accounts.find(acc => acc._id === e.target.value); // Find account by ID\n    setSelectedAccount(account); // Set the selected account\n  };\n\n  // Handle the deposit action\n  const handleDeposit = async e => {\n    e.preventDefault(); // Prevent default form submission\n\n    if (!selectedAccount) {\n      // Ensure an account is selected\n      setMessage('Please select an account');\n      return;\n    }\n    if (depositAmount <= 0) {\n      // Ensure deposit amount is valid\n      setMessage('Please enter a valid deposit amount');\n      return;\n    }\n    try {\n      const response = await fetch(`${apiUrl}/api/accounts/deposit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accountNumber: selectedAccount.accountNumber,\n          // Send selected account number\n          amount: parseInt(depositAmount, 10) // Ensure deposit amount is sent as a number\n        })\n      });\n      const result = await response.json(); // Get response from backend\n      if (response.ok) {\n        // Update the selected account's balance and display success message\n        setSelectedAccount({\n          ...selectedAccount,\n          balance: result.newBalance\n        });\n        setMessage('Deposit successful');\n      } else {\n        setMessage(result.message || 'Error making deposit'); // Handle errors\n      }\n    } catch (error) {\n      console.error('Error making deposit:', error); // Log errors\n      setMessage('Error making deposit');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deposit-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"Select Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleAccountChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select an account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: account._id,\n        children: [account.firstName, \" \", account.lastName]\n      }, account._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), selectedAccount && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Name: \", selectedAccount.firstName, \" \", selectedAccount.lastName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Account Number: \", selectedAccount.accountNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"IFSC Code: \", selectedAccount.ifscCode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Available Balance: \\xA3\", selectedAccount.balance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleDeposit,\n        className: \"form-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Deposit Amount\",\n          onChange: e => setDepositAmount(e.target.value) // Update deposit amount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Deposit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Deposit, \"9Th4K2hTTYtKcHHE74gilFHM/qA=\");\n_c = Deposit;\nexport default Deposit;\nvar _c;\n$RefreshReg$(_c, \"Deposit\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","Deposit","_s","accounts","setAccounts","selectedAccount","setSelectedAccount","depositAmount","setDepositAmount","message","setMessage","apiUrl","process","env","NODE_ENV","fetchAccounts","response","fetch","data","json","console","log","error","handleAccountChange","e","account","find","acc","_id","target","value","handleDeposit","preventDefault","method","headers","body","JSON","stringify","accountNumber","amount","parseInt","result","ok","balance","newBalance","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","firstName","lastName","ifscCode","onSubmit","type","placeholder","_c","$RefreshReg$"],"sources":["/root/Three-Tier-Bank-App/Frontend/src/components/Deposit.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Deposit = () => {\n  const [accounts, setAccounts] = useState([]); // State for storing accounts\n  const [selectedAccount, setSelectedAccount] = useState(null); // State for the selected account\n  const [depositAmount, setDepositAmount] = useState(0); // State for deposit amount\n  const [message, setMessage] = useState(''); // State for success/error messages\n\n  // API URL depending on whether the environment is development or production (Docker)\n  const apiUrl = process.env.NODE_ENV === 'development'\n    ? 'http://localhost:5000' \n    : 'http://backend:5000';\n\n  // Fetch accounts from the backend when the component loads\n  useEffect(() => {\n    const fetchAccounts = async () => {\n      try {\n        const response = await fetch(`${apiUrl}/api/accounts`); // Fetch accounts from backend\n        const data = await response.json(); // Parse the JSON data\n\n        console.log('Fetched accounts:', data); // Log fetched data for debugging\n        setAccounts(data); // Set the accounts in state\n      } catch (error) {\n        console.error('Error fetching accounts:', error); // Log any errors\n      }\n    };\n\n    fetchAccounts();\n  }, [apiUrl]); // Dependency array includes apiUrl to ensure it runs on load\n\n  // Handle the selection of an account from the dropdown\n  const handleAccountChange = (e) => {\n    const account = accounts.find(acc => acc._id === e.target.value); // Find account by ID\n    setSelectedAccount(account); // Set the selected account\n  };\n\n  // Handle the deposit action\n  const handleDeposit = async (e) => {\n    e.preventDefault(); // Prevent default form submission\n\n    if (!selectedAccount) { // Ensure an account is selected\n      setMessage('Please select an account');\n      return;\n    }\n\n    if (depositAmount <= 0) { // Ensure deposit amount is valid\n      setMessage('Please enter a valid deposit amount');\n      return;\n    }\n\n    try {\n      const response = await fetch(`${apiUrl}/api/accounts/deposit`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          accountNumber: selectedAccount.accountNumber, // Send selected account number\n          amount: parseInt(depositAmount, 10), // Ensure deposit amount is sent as a number\n        }),\n      });\n\n      const result = await response.json(); // Get response from backend\n      if (response.ok) {\n        // Update the selected account's balance and display success message\n        setSelectedAccount({ ...selectedAccount, balance: result.newBalance });\n        setMessage('Deposit successful'); \n      } else {\n        setMessage(result.message || 'Error making deposit'); // Handle errors\n      }\n    } catch (error) {\n      console.error('Error making deposit:', error); // Log errors\n      setMessage('Error making deposit');\n    }\n  };\n\n  return (\n    <div className=\"deposit-container\">\n      <h2>Deposit</h2>\n\n      {/* Dropdown to select an account */}\n      <label>Select Account</label>\n      <select onChange={handleAccountChange}>\n        <option value=\"\">Select an account</option>\n        {accounts.map((account) => (\n          <option key={account._id} value={account._id}>\n            {account.firstName} {account.lastName}\n          </option>\n        ))}\n      </select>\n\n      {/* Display selected account details if an account is selected */}\n      {selectedAccount && (\n        <>\n          <p>Account Name: {selectedAccount.firstName} {selectedAccount.lastName}</p>\n          <p>Account Number: {selectedAccount.accountNumber}</p>\n          <p>IFSC Code: {selectedAccount.ifscCode}</p>\n          <p>Available Balance: £{selectedAccount.balance}</p>\n\n          {/* Form for depositing money */}\n          <form onSubmit={handleDeposit} className=\"form-container\">\n            <input \n              type=\"number\" \n              placeholder=\"Deposit Amount\" \n              onChange={(e) => setDepositAmount(e.target.value)} // Update deposit amount\n            />\n            <button type=\"submit\">Deposit</button>\n          </form>\n        </>\n      )}\n\n      <p>{message}</p> {/* Display success or error message */}\n    </div>\n  );\n};\n\nexport default Deposit;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}